from webcolors import CSS3_NAMES_TO_HEX as color_dict
from webcolors import name_to_rgb, name_to_hex

def rgb565(r, g, b):
    # r, g, b values from 0..255
    r5 = int(r*32/256)
    g6 = int(g*64/256)
    b5 = int(b*32/256)
    return (r5 << 11) + (g6 << 5) + b5

# For the sequence
color_names = [
    'Black',
    'DimGray',
    'Gray',
    'DarkGray',
    'Silver',
    'LightGray',
    'Gainsboro',
    'WhiteSmoke',
    'White',

    'DarkSlateGray',
    'SlateGray',
    'LightSlateGray',
    'LightSteelBlue',
    'Lavender',
    'FloralWhite',
    'AliceBlue',
    'GhostWhite',
    'Honeydew',
    'Ivory',
    'Azure',
    'Snow',

    'Maroon',
    'DarkRed',
    'Brown',
    'FireBrick',
    'Crimson',
    'Red',
    'Tomato',
    'Coral',
    'IndianRed',
    'LightCoral',
    'DarkSalmon',
    'Salmon',
    'LightSalmon',
    'OrangeRed',
    'DarkOrange',
    'Orange',
    'Gold',
    'DarkGoldenrod',
    'Goldenrod',
    'PaleGoldenrod',
    'DarkKhaki',
    'Khaki',
    'Olive',
    'Yellow',
    'YellowGreen',
    'DarkOliveGreen',
    'OliveDrab',
    'LawnGreen',
    'Chartreuse',
    'GreenYellow',
    'DarkGreen',
    'Green',
    'ForestGreen',
    'Lime',
    'LimeGreen',
    'LightGreen',
    'PaleGreen',
    'DarkSeaGreen',
    'MediumSpringGreen',
    'SpringGreen',
    'SeaGreen',
    'MediumAquamarine',
    'MediumSeaGreen',
    'LightSeaGreen',
    'Teal',
    'DarkCyan',
    'Aqua',
    'Cyan',
    'LightCyan',
    'DarkTurquoise',
    'Turquoise',
    'MediumTurquoise',
    'PaleTurquoise',
    'Aquamarine',
    'PowderBlue',
    'CadetBlue',
    'SteelBlue',
    'CornflowerBlue',
    'DeepSkyBlue',
    'DodgerBlue',
    'LightBlue',
    'SkyBlue',
    'LightSkyBlue',
    'MidnightBlue',
    'Navy',
    'DarkBlue',
    'MediumBlue',
    'Blue',
    'RoyalBlue',
    'BlueViolet',
    'Indigo',
    'DarkSlateBlue',
    'SlateBlue',
    'MediumSlateBlue',
    'MediumPurple',
    'DarkMagenta',
    'DarkViolet',
    'DarkOrchid',
    'MediumOrchid',
    'Purple',
    'Thistle',
    'Plum',
    'Violet',
    'Magenta',
    'Orchid',
    'MediumVioletRed',
    'PaleVioletRed',
    'DeepPink',
    'HotPink',
    'LightPink',
    'Pink',
    'AntiqueWhite',
    'Beige',
    'Bisque',
    'BlanchedAlmond',
    'Wheat',
    'Cornsilk',
    'LemonChiffon',
    'LightGoldenrodYellow',
    'LightYellow',
    'SaddleBrown',
    'Sienna',
    'Chocolate',
    'Peru',
    'SandyBrown',
    'BurlyWood',
    'Tan',
    'RosyBrown',
    'Moccasin',
    'NavajoWhite',
    'PeachPuff',
    'MistyRose',
    'LavenderBlush',
    'Linen',
    'OldLace',
    'PapayaWhip',
    'Seashell',
    'MintCream',
]

def color_name_to_css_name(name):
    r = 'CSS_' + name[0]
    for c in name[1:]:
        if c.isupper():
            r += '_' + c
        else:
            r += c.upper()
    return r

html_header = '''<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Webcolors</title>
    <style>
      h1 {font-family:sans-serif}
      table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
      }

      td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
      }

      tr:nth-child(even) {
        background-color: #dddddd;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>WebColors</h1>
    </header>
    <table class="dtable">
      <thead>
        <tr>
          <th>Color</th>
          <th>Color Name</th>
          <th>RGB</th>
        </tr>
      </thead>
      <tbody>
'''

html_footer = '''      </tbody>
    </table>
  </body>
</html>
'''

with open("core/src/utils/colors.rs", "w") as f:
    f.write("""// generated by corlors.py

#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
pub enum Colors {
""")

    for idx, color_name in enumerate(sorted(color_names)):
        rgb = name_to_rgb(color_name.lower())
        colorDesc = f"// Rgb({rgb.red}, {rgb.green}, {rgb.blue})"
        color = color_name + f" = {idx},"
        f.write(f"    {color:27}{colorDesc}\n")

    f.write("}\n\n");
    f.write(f"const MAX: u8 = {len(color_names) - 1};")
    f.write("""

use embedded_graphics::pixelcolor::{PixelColor, raw::RawU8};

impl PixelColor for Colors {
    type Raw = RawU8;
}

impl From<Colors> for RawU8 {
    fn from(color: Colors) -> RawU8 {
        RawU8::new(color as u8)
    }
}

use embedded_graphics::pixelcolor::{Rgb888, BinaryColor};
use embedded_graphics::prelude::WebColors;

impl From<Rgb888> for Colors {
    fn from(_color: Rgb888) -> Self {
        Colors::White
    }
}

impl From<BinaryColor> for Colors {
    fn from(_: BinaryColor) -> Self {
        Colors::White
    }
}

impl From<u8> for Colors {
    fn from(color: u8) -> Self {
        if color <= MAX {
            // Safety: We checked the range, so transmute is ok
            unsafe { core::mem::transmute::<u8, Colors>(color) }
        } else {
            Colors::Red // default Value to see something
        }
    }
}

impl From<Colors> for Rgb888 {
    fn from(val: Colors) -> Self {
        match val {
""")            

    for color_name in sorted(color_names):
        css_color_name = color_name_to_css_name(color_name)
        f.write(f"            Colors::{color_name} => Rgb888::{css_color_name},\n")

    f.write("""        }
    }
}
""")


with open(f"core/src/utils/rgb565_colors.rs", "w") as f:
    col_cnt = len(color_names)
    f.write(f"""// generated by corlors.py

#[allow(dead_code)]
pub const RGB565_COLORS: [u16; {col_cnt}] = [
""")
    for idx, colorName in enumerate(sorted(color_names)):
        rgb = name_to_rgb(colorName.lower())
        converted = rgb565(rgb.red, rgb.green, rgb.blue)
        color = f"0x{converted:04x}, "
        colorDesc = f"// {idx:3} {colorName} RGB({rgb.red}, {rgb.green}, {rgb.blue})"
        f.write(f"    {color}{colorDesc}\n")

    f.write("""];
""")

with open('assets/colors.html', 'w') as f:
    f.write(html_header)
    for col in color_names:
        rgb = name_to_rgb(col)
        rgb_desc = f"Rgb({rgb.red}, {rgb.green}, {rgb.blue})"
        hex_desc = name_to_hex(col)

        f.write(f'        <tr>\n')
        f.write(f'          <td style="background: {hex_desc};">&nbsp;</td>\n')
        f.write(f'          <td>{col}</td>\n')
        f.write(f'          <td>{rgb_desc}</td>\n')
        f.write(f'        </tr>\n')
    f.write(html_footer)
