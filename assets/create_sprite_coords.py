import math

class PCoordSprite():
    def __init__(self, name, scale, xy_coords):
        self.name = name
        self.scale = scale
        self.xy_coords = xy_coords

    def to_l_rad(self, x, y):
        l = self.scale * math.sqrt(x*x + y*y)
        if y == 0:
            if x == 0:
                a = 0.0
            else:
                a = math.pi / 2 * (abs(x)/x)
        elif y < 0 and x >= 0:
            a = math.atan(-x/y)
        elif y > 0 and x >= 0:
            a = math.pi - math.atan(x/y)
        elif y > 0 and x < 0:
            a = math.atan(-x/y) - math.pi
        elif y < 0 and x < 0:
            a = math.atan(-x/y)
        return (l, a)
    
    def __str__(self):
        c_cnt = len(self.xy_coords)
        s = f"pub const {self.name}: [PolarCoordinate; {c_cnt}] = [\n"
        for x, y in self.xy_coords:
            l, a = self.to_l_rad(x, y)
            s += f"    PolarCoordinate {{\n        len: {l},\n        alpha: {a},\n    }},\n"
        s += "];\n\n"
        return s

class PCoordSprites:
    def __init__(self):
        self.sprites = []

    def add(self, sprite: PCoordSprite):
        self.sprites.append(sprite)

    def __str__(self):
        s = "// Generated by 'create_sprite_coords.py' - do not edit\n"
        s +="#![allow(clippy::all)]\n\n"
        s += "use super::PolarCoordinate;\n\n"
        for sprite in self.sprites:
            s += str(sprite)
        return s[:-1]

    def to_file(self, filepath):
        with open(filepath, 'w') as f:
            f.write(str(self))


ARROW = (
    'ARROW_PCOORDS',        # name                 
    0.01,                   # scale
        [                   # xy coords
            (0, -50),
            (16, -34),
            (5, -34),
            (5, 50),
            (-5, 50),
            (-5, -34),
            (-16, -34)
        ]
)
    
WIND_ARROW = (
    'WIND_ARROW_PCOORDS',   # name                 
    0.01,                   # scale
        [                   # xy coords
            (0, -66),
            (25, 34),
            (0, 0),
            (-25, 34),
        ]
)

SCALE_MARKER = (
    'SCALE_MARKER_PCOORDS', # name
    1/237,                  # scale
    [                       # xy coords
        (-14, -240),
        (14, -240),
        (0, -208)
    ]
)
    
SIMPLE_INDICATOR = (
    'SIMPLE_INDICATOR_PCOORDS', # name
    1/166,                  # scale
    [                       # xy coords
        (0, -203),
        (-18, -167),
        (18, -167)
    ]
)
    
CLASSIC_INDICATOR = (
    'CLASSIC_INDICATOR_PCOORDS', # name
    1/238,                  # scale
    [                       # xy coords
        (0, -238),
        (9, -222),
        (9, -167),
        (-9, -167),
        (-9, -222),
    ]
)
    
sprites = PCoordSprites()
sprites.add(PCoordSprite(*ARROW))
sprites.add(PCoordSprite(*WIND_ARROW))
sprites.add(PCoordSprite(*SCALE_MARKER))
sprites.add(PCoordSprite(*SIMPLE_INDICATOR))
sprites.add(PCoordSprite(*CLASSIC_INDICATOR))

file_name = 'core/src/view/sprites/polar_defs.rs'
sprites.to_file(file_name)

print(f"'{file_name}' generated")
