// generated by create_corlors.py

#[repr(u16)]
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
pub enum Colors {
    AliceBlue = 0xf7df,           // Rgb(240, 248, 255)
    AntiqueWhite = 0xff5a,        // Rgb(250, 235, 215)
    Aqua = 0x07fe,                // Rgb(0, 255, 255)
    Aquamarine = 0x7ffa,          // Rgb(127, 255, 212)
    Azure = 0xf7ff,               // Rgb(240, 255, 255)
    Beige = 0xf7bb,               // Rgb(245, 245, 220)
    Bisque = 0xff38,              // Rgb(255, 228, 196)
    Black = 0x0000,               // Rgb(0, 0, 0)
    BlanchedAlmond = 0xff59,      // Rgb(255, 235, 205)
    Blue = 0x001f,                // Rgb(0, 0, 255)
    BlueViolet = 0x895c,          // Rgb(138, 43, 226)
    Brown = 0xa145,               // Rgb(165, 42, 42)
    BurlyWood = 0xddd0,           // Rgb(222, 184, 135)
    CadetBlue = 0x5cf4,           // Rgb(95, 158, 160)
    Chartreuse = 0x7fe1,          // Rgb(127, 255, 0)
    Chocolate = 0xd343,           // Rgb(210, 105, 30)
    Coral = 0xfbea,               // Rgb(255, 127, 80)
    CornflowerBlue = 0x64bd,      // Rgb(100, 149, 237)
    Cornsilk = 0xffdb,            // Rgb(255, 248, 220)
    Crimson = 0xd8a7,             // Rgb(220, 20, 60)
    Cyan = 0x07ff,                // Rgb(0, 255, 255)
    DarkBlue = 0x0011,            // Rgb(0, 0, 139)
    DarkCyan = 0x0451,            // Rgb(0, 139, 139)
    DarkGoldenrod = 0xbc21,       // Rgb(184, 134, 11)
    DarkGray = 0xad55,            // Rgb(169, 169, 169)
    DarkGreen = 0x0320,           // Rgb(0, 100, 0)
    DarkKhaki = 0xbdad,           // Rgb(189, 183, 107)
    DarkMagenta = 0x8811,         // Rgb(139, 0, 139)
    DarkOliveGreen = 0x5345,      // Rgb(85, 107, 47)
    DarkOrange = 0xfc60,          // Rgb(255, 140, 0)
    DarkOrchid = 0x9999,          // Rgb(153, 50, 204)
    DarkRed = 0x8800,             // Rgb(139, 0, 0)
    DarkSalmon = 0xecaf,          // Rgb(233, 150, 122)
    DarkSeaGreen = 0x8df1,        // Rgb(143, 188, 143)
    DarkSlateBlue = 0x49f1,       // Rgb(72, 61, 139)
    DarkSlateGray = 0x2a69,       // Rgb(47, 79, 79)
    DarkTurquoise = 0x067a,       // Rgb(0, 206, 209)
    DarkViolet = 0x901a,          // Rgb(148, 0, 211)
    DeepPink = 0xf8b2,            // Rgb(255, 20, 147)
    DeepSkyBlue = 0x05ff,         // Rgb(0, 191, 255)
    DimGray = 0x6b4d,             // Rgb(105, 105, 105)
    DodgerBlue = 0x1c9f,          // Rgb(30, 144, 255)
    FireBrick = 0xb104,           // Rgb(178, 34, 34)
    FloralWhite = 0xffde,         // Rgb(255, 250, 240)
    ForestGreen = 0x2444,         // Rgb(34, 139, 34)
    Gainsboro = 0xdefb,           // Rgb(220, 220, 220)
    GhostWhite = 0xffbf,          // Rgb(248, 248, 255)
    Gold = 0xfea0,                // Rgb(255, 215, 0)
    Goldenrod = 0xdd24,           // Rgb(218, 165, 32)
    Gray = 0x8410,                // Rgb(128, 128, 128)
    Green = 0x0400,               // Rgb(0, 128, 0)
    GreenYellow = 0xafe5,         // Rgb(173, 255, 47)
    Honeydew = 0xf7fe,            // Rgb(240, 255, 240)
    HotPink = 0xfb56,             // Rgb(255, 105, 180)
    IndianRed = 0xcaeb,           // Rgb(205, 92, 92)
    Indigo = 0x4810,              // Rgb(75, 0, 130)
    Ivory = 0xfffe,               // Rgb(255, 255, 240)
    Khaki = 0xf731,               // Rgb(240, 230, 140)
    Lavender = 0xe73f,            // Rgb(230, 230, 250)
    LavenderBlush = 0xff9e,       // Rgb(255, 240, 245)
    LawnGreen = 0x7fe0,           // Rgb(124, 252, 0)
    LemonChiffon = 0xffd9,        // Rgb(255, 250, 205)
    LightBlue = 0xaedc,           // Rgb(173, 216, 230)
    LightCoral = 0xf410,          // Rgb(240, 128, 128)
    LightCyan = 0xe7ff,           // Rgb(224, 255, 255)
    LightGoldenrodYellow = 0xffda,// Rgb(250, 250, 210)
    LightGray = 0xd69a,           // Rgb(211, 211, 211)
    LightGreen = 0x9772,          // Rgb(144, 238, 144)
    LightPink = 0xfdb8,           // Rgb(255, 182, 193)
    LightSalmon = 0xfd0f,         // Rgb(255, 160, 122)
    LightSeaGreen = 0x2595,       // Rgb(32, 178, 170)
    LightSkyBlue = 0x867f,        // Rgb(135, 206, 250)
    LightSlateGray = 0x7453,      // Rgb(119, 136, 153)
    LightSteelBlue = 0xb63b,      // Rgb(176, 196, 222)
    LightYellow = 0xfffc,         // Rgb(255, 255, 224)
    Lime = 0x07e0,                // Rgb(0, 255, 0)
    LimeGreen = 0x3666,           // Rgb(50, 205, 50)
    Linen = 0xff9c,               // Rgb(250, 240, 230)
    Magenta = 0xf81f,             // Rgb(255, 0, 255)
    Maroon = 0x8000,              // Rgb(128, 0, 0)
    MediumAquamarine = 0x6675,    // Rgb(102, 205, 170)
    MediumBlue = 0x0019,          // Rgb(0, 0, 205)
    MediumOrchid = 0xbaba,        // Rgb(186, 85, 211)
    MediumPurple = 0x939b,        // Rgb(147, 112, 219)
    MediumSeaGreen = 0x3d8e,      // Rgb(60, 179, 113)
    MediumSlateBlue = 0x7b5d,     // Rgb(123, 104, 238)
    MediumSpringGreen = 0x07d3,   // Rgb(0, 250, 154)
    MediumTurquoise = 0x4e99,     // Rgb(72, 209, 204)
    MediumVioletRed = 0xc0b0,     // Rgb(199, 21, 133)
    MidnightBlue = 0x18ce,        // Rgb(25, 25, 112)
    MintCream = 0xf7bf,           // Rgb(245, 255, 250)
    MistyRose = 0xff3c,           // Rgb(255, 228, 225)
    Moccasin = 0xff36,            // Rgb(255, 228, 181)
    NavajoWhite = 0xfef5,         // Rgb(255, 222, 173)
    Navy = 0x0010,                // Rgb(0, 0, 128)
    OldLace = 0xffbc,             // Rgb(253, 245, 230)
    Olive = 0x8400,               // Rgb(128, 128, 0)
    OliveDrab = 0x6c64,           // Rgb(107, 142, 35)
    Orange = 0xfd20,              // Rgb(255, 165, 0)
    OrangeRed = 0xfa20,           // Rgb(255, 69, 0)
    Orchid = 0xdb9a,              // Rgb(218, 112, 214)
    PaleGoldenrod = 0xef55,       // Rgb(238, 232, 170)
    PaleGreen = 0x9fd3,           // Rgb(152, 251, 152)
    PaleTurquoise = 0xaf7d,       // Rgb(175, 238, 238)
    PaleVioletRed = 0xdb92,       // Rgb(219, 112, 147)
    PapayaWhip = 0xff7a,          // Rgb(255, 239, 213)
    PeachPuff = 0xfed7,           // Rgb(255, 218, 185)
    Peru = 0xcc27,                // Rgb(205, 133, 63)
    Pink = 0xfe19,                // Rgb(255, 192, 203)
    Plum = 0xdd1b,                // Rgb(221, 160, 221)
    PowderBlue = 0xb71c,          // Rgb(176, 224, 230)
    Purple = 0x8010,              // Rgb(128, 0, 128)
    Red = 0xf800,                 // Rgb(255, 0, 0)
    RosyBrown = 0xbc71,           // Rgb(188, 143, 143)
    RoyalBlue = 0x435c,           // Rgb(65, 105, 225)
    SaddleBrown = 0x8a22,         // Rgb(139, 69, 19)
    Salmon = 0xfc0e,              // Rgb(250, 128, 114)
    SandyBrown = 0xf52c,          // Rgb(244, 164, 96)
    SeaGreen = 0x2c4a,            // Rgb(46, 139, 87)
    Seashell = 0xffbd,            // Rgb(255, 245, 238)
    Sienna = 0xa285,              // Rgb(160, 82, 45)
    Silver = 0xc618,              // Rgb(192, 192, 192)
    SkyBlue = 0x867d,             // Rgb(135, 206, 235)
    SlateBlue = 0x6ad9,           // Rgb(106, 90, 205)
    SlateGray = 0x7412,           // Rgb(112, 128, 144)
    Snow = 0xffdf,                // Rgb(255, 250, 250)
    SpringGreen = 0x07ef,         // Rgb(0, 255, 127)
    SteelBlue = 0x4416,           // Rgb(70, 130, 180)
    Tan = 0xd5b1,                 // Rgb(210, 180, 140)
    Teal = 0x0410,                // Rgb(0, 128, 128)
    Thistle = 0xddfb,             // Rgb(216, 191, 216)
    Tomato = 0xfb08,              // Rgb(255, 99, 71)
    Turquoise = 0x471a,           // Rgb(64, 224, 208)
    Violet = 0xec1d,              // Rgb(238, 130, 238)
    Wheat = 0xf6f6,               // Rgb(245, 222, 179)
    White = 0xffff,               // Rgb(255, 255, 255)
    WhiteSmoke = 0xf7be,          // Rgb(245, 245, 245)
    Yellow = 0xffe0,              // Rgb(255, 255, 0)
    YellowGreen = 0x9e66,         // Rgb(154, 205, 50)
}


use embedded_graphics::pixelcolor::{PixelColor, raw::RawU16};

impl PixelColor for Colors {
    type Raw = RawU16;
}

impl From<Colors> for RawU16 {
    fn from(color: Colors) -> RawU16 {
        RawU16::new(color as u16)
    }
}

use embedded_graphics::pixelcolor::{Rgb888, BinaryColor};

impl From<Rgb888> for Colors {
    fn from(_color: Rgb888) -> Self {
        Colors::White
    }
}

impl From<BinaryColor> for Colors {
    fn from(_: BinaryColor) -> Self {
        Colors::White
    }
}

impl From<u16> for Colors {
    fn from(color: u16) -> Self {
        // Safety: Every u16 is a valid Color
        unsafe { core::mem::transmute::<u16, Colors>(color) }
    }
}

