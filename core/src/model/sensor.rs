use crate::{
    flight_physics::WindVector,
    system_of_units::{
        Acceleration, AngularVelocity, FloatToAcceleration, FloatToAngularVelocity, FloatToLength,
        FloatToSpeed, Length, Pressure, Speed,
    },
    AirSpeed, DateTime, Density,
};
use embedded_graphics::geometry::{Angle, AngleUnit};

/// Enum for GPS state
#[derive(Clone, Copy, PartialEq)]
pub enum GpsState {
    NoGps,
    PosAvail,
    HeadingAvail,
}

/// Sensor Values
///
/// This structure contains all variables that are generated by the Larus sensor box.
pub struct Sensor {
    pub airspeed: AirSpeed,
    pub average_climb_rate: Speed,
    pub average_wind: WindVector,
    pub climb_rate: Speed,
    pub density: Density,
    pub g_force: Acceleration,
    pub gps_altitude: Length,
    pub gps_climb_rate: Speed,
    pub gps_date_time: DateTime,
    pub gps_geo_seperation: Length,
    pub gps_track: Angle,
    pub gps_ground_speed: Speed,
    pub gps_sats: u8,
    pub gps_state: GpsState,
    pub nick_angle: Angle,
    pub pressure: Pressure,
    pub slip_angle: Angle,
    pub turn_rate: AngularVelocity,
    pub vertical_g_force: Acceleration,
    pub wind_vector: WindVector,
}

impl Default for Sensor {
    #[allow(unused)]
    fn default() -> Self {
        Sensor {
            airspeed: AirSpeed::from_tas_at_nn(0.0.km_h()),
            average_climb_rate: 0.0.m_s(),
            average_wind: WindVector::new(0.0.km_h(), 0.0.deg()),
            climb_rate: 0.0.m_s(),
            density: Density::AT_NN(),
            g_force: 9.81.m_s2(),
            gps_altitude: 0.0.m(),
            gps_climb_rate: 0.0.m_s(),
            gps_date_time: DateTime::new(),
            gps_geo_seperation: 0.0.m(),
            gps_track: 0.0.deg(),
            gps_ground_speed: 0.0.m_s(),
            gps_sats: 0,
            gps_state: GpsState::NoGps,
            nick_angle: 0.0.deg(),
            pressure: Pressure::AT_NN(),
            slip_angle: 0.0.deg(),
            turn_rate: 0.0.rad_s(),
            vertical_g_force: 9.81.m_s2(),
            wind_vector: WindVector::new(0.0.km_h(), 0.0.deg()),
        }
    }
}
